package factory;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;
import java.io.BufferedWriter;

@Entity
@Table(name = "client")
@NamedQueries({
	@NamedQuery(name="Client.findByLastname", query="select c from Client c where c.NOM=:name"),
	@NamedQuery(name="Client.findByFirstname", query="select c from Client c where c.PRENOM=:fistname")
})
public class Client {
	
	private String NOM;
	private String PRENOM;
	private String LOGIN;
	@Id @GeneratedValue private Integer id ;
	//private String mdp;
	 

	
	//private Map<String, Compte> comptesMap = new HashMap<>();
	

	

	public Client() {
		// TODO Auto-generated constructor stub
	}
	
	@Override
	public String toString() {
		return "Client [nom=" + NOM + ", prenom=" + PRENOM + ", login=" + LOGIN + ", id=" + id + "]";
	}

	public Client(String nom, String prenom, String login) {
		super();
		this.NOM = nom;
		this.PRENOM = prenom;
		this.LOGIN =login;
		
	}
	/*
	private void creerCompte(Compte compte) {
		comptesMap.put(compte.getNumero(), compte);
	}
	
	private void supprimerCompte(Compte compte) {
		comptesMap.remove(compte.getNumero());
	}
	
	private Compte retournerCompte(String numero) throws CompteNonTrouveException {
		Compte compteRecherche = (Compte) comptesMap.get(numero);
	
		if(compteRecherche == null) {
			throw new CompteNonTrouveException();
		}
		
		return compteRecherche;
	}
	
	
	private void supprimerCompte(String numero) throws CompteNonTrouveException {
		Compte compteRecherche = retournerCompte(numero);
		comptesMap.remove(compteRecherche.getNumero());
	}
	*/

	public String getNom() {
		return NOM;
	}

	public void setNom(String nom) {
		this.NOM = nom;
	}

	public String getPrenom() {
		return PRENOM;
	}

	public void setPrenom(String prenom) {
		this.PRENOM = prenom;
	}

	/*
	private Collection<Compte> getComptesList() {
		return comptesMap.values();
	}
	
	public String getMdp() {
		return mdp;
	}

	public void setMdp(String mdp) {
		this.mdp = mdp;
	}
	*/
	
	
	/*
	private int nbCompte(){
		return comptesMap.size();
	}
	*/
	/*
	public Boolean mdpValid(String mdp){
		if (this.mdp == mdp)
		{
			return true;
		}
		else 
		{
			return false;
		}
	}
	*/
	public String getLogin() {
		return LOGIN;
	}

	public void setLogin(String login) {
		this.LOGIN = login;
	}

	
	/*
	private String toString() {
		return String.format("Client [nom=%s, prenom=%s, identifiant=%s, mdp=%s]", nom, prenom, login);
	}
	*/

}
